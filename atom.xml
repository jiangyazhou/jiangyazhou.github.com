<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Asian Jiang's Blog]]></title>
  <link href="http://jiangyazhou.github.com/atom.xml" rel="self"/>
  <link href="http://jiangyazhou.github.com/"/>
  <updated>2014-03-25T13:03:51+08:00</updated>
  <id>http://jiangyazhou.github.com/</id>
  <author>
    <name><![CDATA[Jiang Yazhou]]></name>
    <email><![CDATA[359675594@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[autoresizingMask]]></title>
    <link href="http://jiangyazhou.github.com/blog/2014/03/25/autoresizingmask/"/>
    <updated>2014-03-25T11:52:03+08:00</updated>
    <id>http://jiangyazhou.github.com/blog/2014/03/25/autoresizingmask</id>
    <content type="html"><![CDATA[<p> UIView autoresizingMask</p>

<pre><code>enum {
   UIViewAutoresizingNone                 = 0,
   UIViewAutoresizingFlexibleLeftMargin   = 1 &lt;&lt; 0,
   UIViewAutoresizingFlexibleWidth        = 1 &lt;&lt; 1,
   UIViewAutoresizingFlexibleRightMargin  = 1 &lt;&lt; 2,
   UIViewAutoresizingFlexibleTopMargin    = 1 &lt;&lt; 3,
   UIViewAutoresizingFlexibleHeight       = 1 &lt;&lt; 4,
   UIViewAutoresizingFlexibleBottomMargin = 1 &lt;&lt; 5
};
</code></pre>

<ul>
<li>UIViewAutoresizingNone</li>
<li>UIViewAutoresizingFlexibleLeftMargin
superViewsuperView</li>
<li>UIViewAutoresizingFlexibleRightMargin
superViewsuperView</li>
<li>UIViewAutoresizingFlexibleTopMargin
superViewsuperView</li>
<li>UIViewAutoresizingFlexibleBottomMargin
superViewsuperView</li>
<li>UIViewAutoresizingFlexibleWidth superView</li>
<li>UIViewAutoresizingFlexibleHeight superView</li>
<li><p>UIViewAutoresizingFlexibleLeftMargin |UIViewAutoresizingFlexibleRightMargin
superView20306810268/20=102/30</p>

<ul>
<li><p>(void)viewDidLoad
{
 [super viewDidLoad];
 self.view.backgroundColor = [UIColor whiteColor];</p>

<p> UIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(10.0f, 40.0f, 200.0f, 200.0f)];
 view1.backgroundColor = [UIColor greenColor];</p>

<p> UIView *subView1 = [[UIView alloc] initWithFrame:CGRectMake(20.0f, 10.0f, 150.0f, 100.0f)];
 subView1.backgroundColor = [UIColor redColor];
 subView1.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin;</p>

<p> [view1 addSubview:subView1];
 [self.view addSubview:view1];</p>

<p> view1.frame = CGRectMake(10.0f, 40.0f, 320.0f, 200.0f);
 NSLog(@&ldquo;subView1.frame:%@&rdquo;, NSStringFromCGRect(subView1.frame));
}</p></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于block多参数的情况]]></title>
    <link href="http://jiangyazhou.github.com/blog/2014/03/25/guan-yu-blockduo-can-shu-de-qing-kuang/"/>
    <updated>2014-03-25T11:03:47+08:00</updated>
    <id>http://jiangyazhou.github.com/blog/2014/03/25/guan-yu-blockduo-can-shu-de-qing-kuang</id>
    <content type="html"><![CDATA[<p>关于block的原理，唐巧已经在他的blog里面做了很详尽和专业的分析：
<a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/</a>
一言以蔽之：<strong><em>闭包是一个函数（或指向函数的指针），再加上该函数执行的外部的上下文变量（有时候也称作自由变量）。block是Objective-C语言对于闭包的实现。</em></strong></p>

<p>我们大多数用block的时候，一般只会用到block带确定个参数的情况，比如：</p>

<p><code>void (^callback)(int);</code>
<code>void (^callback)(NSDate *);</code></p>

<p>如果现在要实现block的参数个数不定的情况，该怎么实现呢？记得我们用UIAlertView类的时候，有个初始化方法为：</p>

<p><code>- (id)initWithTitle:(NSString *)title message:(NSString *)message delegate:(id)delegate cancelButtonTitle:(NSString *)cancelButtonTitle otherButtonTitles:(NSString *)otherButtonTitles, ...</code></p>

<p>注意到没有，otherButtonTitles后面的3个省略号。对了，这就是C语言实现参数不定的方法。我们把它移植到block中来，比如：</p>

<p><code>void (^callback)(NSDate *, ...)</code></p>

<p>问题又来了，怎么获得NSDate后面的参数呢。C语言提供了var_start,var_end,var_arg 3个宏可以用来获取NSDate后面的参数。关于var_start,var_end,var_arg的详细信息，可以参考：<a href="http://www.cnblogs.com/hanyonglu/archive/2011/05/07/2039916.html">http://www.cnblogs.com/hanyonglu/archive/2011/05/07/2039916.html</a>
有一点需要注意，<strong><em>函数参数是以数据结构栈的形式存取,从右至左入栈。参数存放在内存的栈中，在执行函数的时候，从最后一个开始入栈。因此栈底高地址，栈顶低地址，</em></strong>。</p>

<p>比如我们又一个类TestView，在点击这个类的时候，触发一个block：</p>

<p>TestView.h</p>

<p>`#import &lt;UIKit/UIKit.h></p>

<p>typedef void(^CallbackBlock)(NSObject *object, &hellip;);</p>

<p>@interface TestView : UIView</p>

<p>@property (nonatomic, copy) CallbackBlock callbackBlock;</p>

<p>@end`</p>

<p>TestView.m</p>

<p>`#import &ldquo;TestView.h&rdquo;</p>

<p>@implementation TestView</p>

<ul>
<li><p>(id)initWithFrame:(CGRect)frame
{
  self = [super initWithFrame:frame];
  if (self) {</p>

<p>  }</p>

<p>  return self;
}</p></li>
<li>(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event
{
  if(<em>callbackBlock) {
      </em>callbackBlock(@&ldquo;1&rdquo;, @&ldquo;2&rdquo;, [NSDate date], [NSArray arrayWithObjects:@&ldquo;1&rdquo;, nil], nil);
  }
}
@end`</li>
</ul>


<p><strong>注意，参数列表的末尾一定要以nil结束，否则会报野指针的异常。</strong></p>

<p>ViewController.h</p>

<p>`#import &lt;UIKit/UIKit.h></p>

<h1>import &ldquo;TestView.h&rdquo;</h1>

<p>@interface ViewController : UIViewController</p>

<p>@end`</p>

<p>ViewController.m</p>

<p>`#import &ldquo;ViewController.h&rdquo;</p>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];
  self.view.backgroundColor = [UIColor whiteColor];</p>

<p>  TestView <em>testView = [[TestView alloc] initWithFrame:CGRectMake(10, 100, 300, 100)];
  testView.backgroundColor = [UIColor orangeColor];
  [self.view addSubview:testView];
  testView.callbackBlock = ^(NSObject </em>obj1, &hellip;) {</p>

<pre><code>  va_list ap;
  NSString *str_ = nil;

  va_start(ap, obj1);
  str_ = va_arg(ap, id);

  while(str_ != nil) {
      NSLog(@"str_:%@", str_);
      str_ = va_arg(ap, NSString *);
  }
  va_end(ap);
</code></pre>

<p>  };
}`</p></li>
</ul>


<p>以后在工程中，只用定义一个block就可以了：
<code>typedef void(^CallbackBlock)(NSObject *object, ...);</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS技术博客汇总]]></title>
    <link href="http://jiangyazhou.github.com/blog/2014/03/19/ios-blog/"/>
    <updated>2014-03-19T21:53:26+08:00</updated>
    <id>http://jiangyazhou.github.com/blog/2014/03/19/ios-blog</id>
    <content type="html"><![CDATA[<p><strong>中文blog</strong></p>

<ul>
<li>NSLoger: <a href="http://nsloger.com/">http://nsloger.com/</a></li>
<li>Esoft Mobile: <a href="http://esoftmobile.com/">http://esoftmobile.com/</a></li>
<li>不会开机的男孩: <a href="http://studentdeng.github.io/">http://studentdeng.github.io/</a></li>
<li>Xcode Dev: <a href="http://blog.xcodev.com/">http://blog.xcodev.com/</a></li>
<li>Ted&rsquo;s Homepage: <a href="http://wufawei.com/">http://wufawei.com/</a></li>
<li>Tony&rsquo;s blog: <a href="http://itony.me/">http://itony.me/</a></li>
<li>hrchen&rsquo;s blogging: <a href="http://www.hrchen.com/">http://www.hrchen.com/</a></li>
<li>唐巧的技术博客: <a href="http://blog.devtang.com/">http://blog.devtang.com/</a></li>
<li>破船之家: <a href="http://beyondvincent.com/">http://beyondvincent.com/</a></li>
<li>念茜的博客: <a href="http://blog.csdn.net/yiyaaixuexi">http://blog.csdn.net/yiyaaixuexi</a></li>
<li>Luke&rsquo;s Homepage: <a href="http://geeklu.com/">http://geeklu.com/</a></li>
<li>yingkong1987: <a href="http://yingkong1987.github.io/">http://yingkong1987.github.io/</a></li>
<li>GirliOS: <a href="http://girlios.github.io/">http://girlios.github.io/</a></li>
<li>OneV&rsquo;s Den: <a href="http://onevcat.com/">http://onevcat.com/</a></li>
<li>Wonderffee&rsquo;s Blog: <a href="http://wonderffee.github.io/">http://wonderffee.github.io/</a></li>
</ul>


<p><strong>英文blog</strong></p>

<ul>
<li>objc.io: <a href="http://www.objc.io/">http://www.objc.io/</a></li>
<li>NSHipster: <a href="http://nshipster.com/">http://nshipster.com/</a></li>
<li>Think&amp;Build: <a href="http://www.thinkandbuild.it/">http://www.thinkandbuild.it/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
